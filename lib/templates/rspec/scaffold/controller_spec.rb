require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

<% module_namespacing do -%>
describe <%= controller_class_name %>Controller do

  # This should return the minimal set of attributes required to create a valid
  # <%= class_name %>. As you add validations to <%= class_name %>, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { FactoryGirl.attributes_for(:<%= file_name %>) }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # <%= controller_class_name %>Controller. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before do
    @<%= file_name %> = FactoryGirl.create(:<%= file_name %>)
  end

<% unless options[:singleton] -%>
  describe "GET index" do
    subject(:action){ get :index, {}, valid_session }
    it "assigns all <%= table_name.pluralize %> as @<%= table_name.pluralize %>" do
      subject
      expect(assigns(:<%= table_name %>)).to eq([@<%= file_name %>])
    end
  end

<% end -%>
  describe "GET show" do
    subject { get :show, {id: @<%= file_name %>.to_param}, valid_session }
    it "assigns the requested <%= ns_file_name %> as @<%= ns_file_name %>" do
      subject
      expect(assigns(:<%= ns_file_name %>)).to eq(@<%= file_name %>)
    end
  end

  describe "GET new" do
    subject(:action){ get :new, {}, valid_session }
    it "assigns a new <%= ns_file_name %> as @<%= ns_file_name %>" do
      subject
      expect(assigns(:<%= ns_file_name %>)).to be_a_new(<%= class_name %>)
    end
  end

  describe "GET edit" do
    subject(:action){ get :edit, {id: @<%= file_name %>.to_param}, valid_session }
    it "assigns the requested <%= ns_file_name %> as @<%= ns_file_name %>" do
      subject
      expect(assigns(:<%= ns_file_name %>)).to eq(@<%= file_name %>)
    end
  end

  describe "POST create" do
    subject(:action){ post :create, {<%= ns_file_name %>: attributes}, valid_session }
    describe "with valid params" do
      let(:attributes){ valid_attributes }
      it "creates a new <%= class_name %>" do
        expect{subject}.to change(<%= class_name %>, :count).by(1)
      end

      it "assigns a newly created <%= ns_file_name %> as @<%= ns_file_name %>" do
        subject
        expect(assigns(:<%= ns_file_name %>)).to be_a(<%= class_name %>)
        expect(assigns(:<%= ns_file_name %>)).to be_persisted
      end

      it "redirects to the created <%= ns_file_name %>" do
        expect(subject).to redirect_to(<%= class_name %>.last)
      end
    end

    describe "with invalid params" do
      let(:attributes){ <%=formatted_hash(example_invalid_attributes)%> }
      it "assigns a newly created but unsaved <%= ns_file_name %> as @<%= ns_file_name %>" do
        subject
        expect(assigns(:<%= ns_file_name %>)).to be_a_new(<%= class_name %>)
      end

      it "re-renders the 'new' template" do
        expect(subject).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    subject(:action){ put :update, {id: @<%= file_name %>.to_param, <%= ns_file_name %>: attributes}, valid_session }
    describe "with valid params" do
      let(:attributes){ <%= formatted_hash(example_params_for_update) %> }
      it "updates the requested <%= ns_file_name %>" do
        subject
        expect(assigns(:<%= ns_file_name %>).<%= example_params_for_update.keys[0] %>).to eq(<%= example_params_for_update.values[0] %>)
      end

      it "assigns the requested <%= ns_file_name %> as @<%= ns_file_name %>" do
        subject
        expect(assigns(:<%= ns_file_name %>)).to eq(@<%= file_name %>)
      end

      it "redirects to the <%= ns_file_name %>" do
        subject
        expect(response).to redirect_to(@<%= file_name %>)
      end
    end

    describe "with invalid params" do
      let(:attributes){ <%= formatted_hash(example_invalid_attributes) %> }
      it "assigns the <%= ns_file_name %> as @<%= ns_file_name %>" do
        subject
        expect(assigns(:<%= ns_file_name %>)).to eq(@<%= file_name %>)
        expect(@<%= file_name %>.reload.<%= example_params_for_update.keys[0] %>).not_to eq(<%= example_params_for_update.values[0] %>)
      end

      it "re-renders the 'edit' template" do
        expect(subject).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    subject(:action){ delete :destroy, {id: @<%= file_name %>.to_param}, valid_session }
    it "destroys the requested <%= ns_file_name %>" do
      expect{subject}.to change(<%= class_name %>, :count).by(-1)
    end

    it "redirects to the <%= table_name %> list" do
      expect(subject).to redirect_to(<%= index_helper %>_url)
    end
  end

end
<% end -%>
