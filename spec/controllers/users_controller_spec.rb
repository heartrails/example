require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UsersController do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { FactoryGirl.attributes_for(:user) }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { { user_id: @user.id } }

  before do
    @user = FactoryGirl.create(:user)
  end

  describe "GET show" do
    subject { get :show, {id: @user.to_param}, valid_session }
    it "assigns the requested user as @user" do
      subject
      expect(assigns(:user)).to eq(@user)
    end
  end

  describe "GET new" do
    subject(:action){ get :new, {}, valid_session }
    it "assigns a new user as @user" do
      subject
      expect(assigns(:user)).to be_a_new(User)
    end
  end

  describe "GET edit" do
    subject(:action){ get :edit, {id: @user.to_param}, valid_session }
    it "assigns the requested user as @user" do
      subject
      expect(assigns(:user)).to eq(@user)
    end
  end

  describe "POST create" do
    subject(:action){ post :create, {user: attributes}, valid_session }
    describe "with valid params" do
      let(:attributes){ valid_attributes }
      it "creates a new User" do
        expect{subject}.to change(User, :count).by(1)
      end

      it "assigns a newly created user as @user" do
        subject
        expect(assigns(:user).errors.messages).to eq({})
        expect(assigns(:user)).to be_a(User)
        expect(assigns(:user)).to be_persisted
      end

      it "redirects to the created user" do
        expect(subject).to redirect_to(User.last)
      end
    end

    describe "with invalid params" do
      let(:attributes){ valid_attributes.merge(password_confirmation: "hogehoge") }
      it "assigns a newly created but unsaved user as @user" do
        subject
        expect(assigns(:user)).to be_a_new(User)
      end

      it "re-renders the 'new' template" do
        expect(subject).to render_template("new")
      end
    end
    describe "with invalid params (Array)" do
      let(:attributes){ [1, 2, 3] }
      it "assigns a newly created but unsaved user as @user" do
        expect{subject}.to raise_error(ActionController::InvalidParameterType)
      end
    end
  end

  describe "PUT update" do
    subject(:action){ put :update, {id: @user.to_param, user: attributes}, valid_session }
    describe "with valid params" do
      let(:attributes){ { "username" => "updated_name" } }
      it "updates the requested user" do
        subject
        expect(assigns(:user).username).to eq('updated_name')
      end

      it "assigns the requested user as @user" do
        subject
        expect(assigns(:user)).to eq(@user)
      end

      it "redirects to the user" do
        subject
        expect(response).to redirect_to(@user)
      end
    end

    describe "with invalid params" do
      let(:attributes){ { "username" => "" } }
      it "assigns the user as @user" do
        subject
        expect(assigns(:user)).to eq(@user)
      end

      it { should render_template("edit") }
    end
  end

  describe "DELETE destroy" do
    subject(:action){ delete :destroy, {id: @user.to_param}, valid_session }
    it "destroys the requested user" do
      expect{subject}.to change(User, :count).by(-1)
    end

    it "redirects to root" do
      expect(subject).to redirect_to(root_url)
    end
  end

end
